package leap.data.framework.core.test; /**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */

import leap.framework.serialization.SensitiveContent;
import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AccountCreatedData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6844645775901769913L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AccountCreatedData\",\"fields\":[{\"name\":\"acid\",\"type\":[\"null\",\"long\"],\"@javaAnnotation\":\"Sensitive\"},{\"name\":\"cid\",\"type\":[\"null\",\"long\"]},{\"name\":\"openingdate\",\"type\":[\"null\",{\"type\":\"int\",\"logicalType\":\"date\"}]},{\"name\":\"balance\",\"type\":[\"null\",\"double\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @SensitiveContent
  @Deprecated public Long acid;
  @Deprecated public Long cid;
  @Deprecated public org.joda.time.LocalDate openingdate;
  @Deprecated public Double balance;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AccountCreatedData() {}

  /**
   * All-args constructor.
   * @param acid The new value for acid
   * @param cid The new value for cid
   * @param openingdate The new value for openingdate
   * @param balance The new value for balance
   */
  public AccountCreatedData(Long acid, Long cid, org.joda.time.LocalDate openingdate, Double balance) {
    this.acid = acid;
    this.cid = cid;
    this.openingdate = openingdate;
    this.balance = balance;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return acid;
    case 1: return cid;
    case 2: return openingdate;
    case 3: return balance;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: acid = (Long)value$; break;
    case 1: cid = (Long)value$; break;
    case 2: openingdate = (org.joda.time.LocalDate)value$; break;
    case 3: balance = (Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'acid' field.
   * @return The value of the 'acid' field.
   */
  public Long getAcid() {
    return acid;
  }

  /**
   * Sets the value of the 'acid' field.
   * @param value the value to set.
   */
  public void setAcid(Long value) {
    this.acid = value;
  }

  /**
   * Gets the value of the 'cid' field.
   * @return The value of the 'cid' field.
   */
  public Long getCid() {
    return cid;
  }

  /**
   * Sets the value of the 'cid' field.
   * @param value the value to set.
   */
  public void setCid(Long value) {
    this.cid = value;
  }

  /**
   * Gets the value of the 'openingdate' field.
   * @return The value of the 'openingdate' field.
   */
  public org.joda.time.LocalDate getOpeningdate() {
    return openingdate;
  }

  /**
   * Sets the value of the 'openingdate' field.
   * @param value the value to set.
   */
  public void setOpeningdate(org.joda.time.LocalDate value) {
    this.openingdate = value;
  }

  /**
   * Gets the value of the 'balance' field.
   * @return The value of the 'balance' field.
   */
  public Double getBalance() {
    return balance;
  }

  /**
   * Sets the value of the 'balance' field.
   * @param value the value to set.
   */
  public void setBalance(Double value) {
    this.balance = value;
  }

  /**
   * Creates a new AccountCreatedData RecordBuilder.
   * @return A new AccountCreatedData RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new AccountCreatedData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AccountCreatedData RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }

  /**
   * Creates a new AccountCreatedData RecordBuilder by copying an existing AccountCreatedData instance.
   * @param other The existing instance to copy.
   * @return A new AccountCreatedData RecordBuilder
   */
  public static Builder newBuilder(AccountCreatedData other) {
    return new Builder(other);
  }

  /**
   * RecordBuilder for AccountCreatedData instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AccountCreatedData>
    implements org.apache.avro.data.RecordBuilder<AccountCreatedData> {

    private Long acid;
    private Long cid;
    private org.joda.time.LocalDate openingdate;
    private Double balance;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.acid)) {
        this.acid = data().deepCopy(fields()[0].schema(), other.acid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.cid)) {
        this.cid = data().deepCopy(fields()[1].schema(), other.cid);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.openingdate)) {
        this.openingdate = data().deepCopy(fields()[2].schema(), other.openingdate);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.balance)) {
        this.balance = data().deepCopy(fields()[3].schema(), other.balance);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing AccountCreatedData instance
     * @param other The existing instance to copy.
     */
    private Builder(AccountCreatedData other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.acid)) {
        this.acid = data().deepCopy(fields()[0].schema(), other.acid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.cid)) {
        this.cid = data().deepCopy(fields()[1].schema(), other.cid);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.openingdate)) {
        this.openingdate = data().deepCopy(fields()[2].schema(), other.openingdate);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.balance)) {
        this.balance = data().deepCopy(fields()[3].schema(), other.balance);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'acid' field.
      * @return The value.
      */
    public Long getAcid() {
      return acid;
    }

    /**
      * Sets the value of the 'acid' field.
      * @param value The value of 'acid'.
      * @return This builder.
      */
    public Builder setAcid(Long value) {
      validate(fields()[0], value);
      this.acid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'acid' field has been set.
      * @return True if the 'acid' field has been set, false otherwise.
      */
    public boolean hasAcid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'acid' field.
      * @return This builder.
      */
    public Builder clearAcid() {
      acid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'cid' field.
      * @return The value.
      */
    public Long getCid() {
      return cid;
    }

    /**
      * Sets the value of the 'cid' field.
      * @param value The value of 'cid'.
      * @return This builder.
      */
    public Builder setCid(Long value) {
      validate(fields()[1], value);
      this.cid = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'cid' field has been set.
      * @return True if the 'cid' field has been set, false otherwise.
      */
    public boolean hasCid() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'cid' field.
      * @return This builder.
      */
    public Builder clearCid() {
      cid = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'openingdate' field.
      * @return The value.
      */
    public org.joda.time.LocalDate getOpeningdate() {
      return openingdate;
    }

    /**
      * Sets the value of the 'openingdate' field.
      * @param value The value of 'openingdate'.
      * @return This builder.
      */
    public Builder setOpeningdate(org.joda.time.LocalDate value) {
      validate(fields()[2], value);
      this.openingdate = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'openingdate' field has been set.
      * @return True if the 'openingdate' field has been set, false otherwise.
      */
    public boolean hasOpeningdate() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'openingdate' field.
      * @return This builder.
      */
    public Builder clearOpeningdate() {
      openingdate = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'balance' field.
      * @return The value.
      */
    public Double getBalance() {
      return balance;
    }

    /**
      * Sets the value of the 'balance' field.
      * @param value The value of 'balance'.
      * @return This builder.
      */
    public Builder setBalance(Double value) {
      validate(fields()[3], value);
      this.balance = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'balance' field has been set.
      * @return True if the 'balance' field has been set, false otherwise.
      */
    public boolean hasBalance() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'balance' field.
      * @return This builder.
      */
    public Builder clearBalance() {
      balance = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public AccountCreatedData build() {
      try {
        AccountCreatedData record = new AccountCreatedData();
        record.acid = fieldSetFlags()[0] ? this.acid : (Long) defaultValue(fields()[0]);
        record.cid = fieldSetFlags()[1] ? this.cid : (Long) defaultValue(fields()[1]);
        record.openingdate = fieldSetFlags()[2] ? this.openingdate : (org.joda.time.LocalDate) defaultValue(fields()[2]);
        record.balance = fieldSetFlags()[3] ? this.balance : (Double) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
